Description: When using the webinterface to widen or shrink the range of
 IPs that cupsd will listen to, also write systemd-compatible socket
 unit configuration.
 .
 When this file is written by the scheduler, also reload the systemd
 daemon and let systemd restart the cups.socket. This makes sure that
 systemd is always the owner of the ports and enables socket activation
 through all the ports that cupsd listens to.
 .
 This is enabled throught the cupsd-listen.conf symlink to
 /etc/cups/cupsd-systemd-listen.conf in the
 /etc/systemd/system/cups.socket.d/ directory.
Author: Didier Raboud <odyx@debian.org>
Bug-Debian: https://bugs.debian.org/740382
Last-Update: 2014-03-05
--- a/cups/adminutil.c
+++ b/cups/adminutil.c
@@ -1209,6 +1209,8 @@
   cups_option_t	*cupsd_settings,	/* New settings */
 		*setting;		/* Current setting */
   _cups_globals_t *cg = _cupsGlobals();	/* Global data */
+  char		tempfiled[1024];	/* Temporary new cupsd-systemd-listen.conf */
+  cups_file_t	*systemdlistenconf;	/* cupsd-systemd-listen.conf file */
 
 
  /*
@@ -1403,6 +1405,23 @@
   }
 
  /*
+  * Create a temporary file for the new cupsd-systemd-listen.conf...
+  */
+  if ((systemdlistenconf = cupsTempFile2(tempfiled, sizeof(tempfiled))) == NULL)
+  {
+    _cupsSetError(IPP_STATUS_ERROR_INTERNAL, NULL, 0);
+    return (0);
+  }
+
+  cupsFilePuts(systemdlistenconf,"[Socket]\n");
+  cupsFilePuts(systemdlistenconf,"# This file was generated by CUPS and _WILL_ be deleted or overwritten by it!\n");
+  cupsFilePuts(systemdlistenconf,"# It has to be kept in sync with the Port and Listen stanzas in /etc/cups/cupsd.conf\n");
+  cupsFilePuts(systemdlistenconf,"# It is by default symlinked as cups-listen.conf in the\n");
+  cupsFilePuts(systemdlistenconf,"# /etc/systemd/system/cups.socket.d/ directory. Remove the symlink\n");
+  cupsFilePuts(systemdlistenconf,"# and write your own file there if you don't want this. See systemd.socket(5).\n");
+
+
+ /*
   * Copy the old file to the new, making changes along the way...
   */
 
@@ -1448,12 +1467,24 @@
 	{
 	  cupsFilePuts(temp, "# Allow remote access\n");
 	  cupsFilePrintf(temp, "Port %d\n", server_port);
+
+	  /* Let systemd's socket configuration listen on all port numbers */
+	  cupsFilePuts(systemdlistenconf,   "# Allow remote access\n");
+	  cupsFilePrintf(systemdlistenconf, "# Matches 'Port %d' from cupsd.conf.\n",ippPort());
+	  cupsFilePrintf(systemdlistenconf, "ListenStream=0.0.0.0:%d\n", server_port);
+	  cupsFilePrintf(systemdlistenconf, "ListenStream=[::]:%d\n", server_port);
 	}
 	else
 	{
 	  cupsFilePuts(temp, "# Only listen for connections from the local "
 	                     "machine.\n");
 	  cupsFilePrintf(temp, "Listen localhost:%d\n", server_port);
+
+	  /* Let systemd's socket configuration listen only on local IP addresses */
+	  cupsFilePuts(systemdlistenconf,   "# Only listen for connections from the local machine.\n");
+	  cupsFilePrintf(systemdlistenconf, "# Matches 'Listen localhost:%d' from cupsd.conf.\n",ippPort());
+	  cupsFilePrintf(systemdlistenconf, "ListenStream=127.0.0.1:%d\n", server_port);
+	  cupsFilePrintf(systemdlistenconf, "ListenStream=[::1]:%d\n", server_port);
 	}
 
 #ifdef CUPS_DEFAULT_DOMAINSOCKET
@@ -1805,12 +1836,24 @@
     {
       cupsFilePuts(temp, "# Allow remote access\n");
       cupsFilePrintf(temp, "Port %d\n", ippPort());
+
+      /* Let systemd's socket configuration listen on all port numbers */
+      cupsFilePuts(systemdlistenconf,   "# Allow remote access\n");
+      cupsFilePrintf(systemdlistenconf, "# Matches 'Port %d' from cupsd.conf.\n",ippPort());
+      cupsFilePrintf(systemdlistenconf, "ListenStream=0.0.0.0:%d\n", ippPort());
+      cupsFilePrintf(systemdlistenconf, "ListenStream=[::]:%d\n", ippPort());
     }
     else
     {
       cupsFilePuts(temp,
                    "# Only listen for connections from the local machine.\n");
       cupsFilePrintf(temp, "Listen localhost:%d\n", ippPort());
+
+      /* Let systemd's socket configuration listen only on local IP addresses */
+      cupsFilePuts(systemdlistenconf,   "# Only listen for connections from the local machine.\n");
+      cupsFilePrintf(systemdlistenconf, "# Matches 'Listen localhost:%d' from cupsd.conf.\n",ippPort());
+      cupsFilePrintf(systemdlistenconf, "ListenStream=127.0.0.1:%d\n", ippPort());
+      cupsFilePrintf(systemdlistenconf, "ListenStream=[::1]:%d\n", ippPort());
     }
 
 #ifdef CUPS_DEFAULT_DOMAINSOCKET
@@ -1947,6 +1990,16 @@
 
   cupsFileClose(cupsd);
   cupsFileClose(temp);
+  cupsFileClose(systemdlistenconf);
+
+ /*
+  * Upload the systemd configuration file to the server...
+  */
+
+  status = cupsPutFile(http, "/admin/conf/cupsd-systemd-listen.conf", tempfiled);
+
+  if (status == HTTP_STATUS_CREATED)
+  {
 
  /*
   * Upload the configuration file to the server...
@@ -2015,6 +2068,7 @@
   else
     cupsFreeOptions(cupsd_num_settings, cupsd_settings);
 
+  }
  /*
   * Remote our temp files and return...
   */
@@ -2023,6 +2077,7 @@
     unlink(cupsdconf);
 
   unlink(tempfile);
+  unlink(tempfiled);
 
   return (status == HTTP_STATUS_CREATED);
 }
--- a/scheduler/client.c
+++ b/scheduler/client.c
@@ -1741,10 +1741,10 @@
 	    * Validate the resource name...
 	    */
 
-            if (strcmp(con->uri, "/admin/conf/cupsd.conf"))
+            if (strcmp(con->uri, "/admin/conf/cupsd.conf") && strcmp(con->uri, "/admin/conf/cupsd-systemd-listen.conf"))
 	    {
 	     /*
-	      * PUT can only be done to the cupsd.conf file...
+	      * PUT can only be done to the cupsd.conf and cupsd-systemd-listen.conf files...
 	      */
 
 	      cupsdLogMessage(CUPSD_LOG_ERROR,
@@ -3451,6 +3451,7 @@
 		*out;			/* Output file */
   char		buffer[16384];		/* Copy buffer */
   ssize_t	bytes;			/* Number of bytes */
+  char		*conffile;		/* Configuration file */
 
 
  /*
@@ -3465,17 +3466,30 @@
   }
 
  /*
+  * Determine which configuration file we're writing
+  */
+
+  if (strcmp(con->uri, "/admin/conf/cupsd.conf") == 0)
+  {
+    conffile = ConfigurationFile;
+  }
+  else if(strcmp(con->uri, "/admin/conf/cupsd-systemd-listen.conf") == 0)
+  {
+    conffile = SystemdConfigurationFile;
+  }
+
+ /*
   * Open the new config file...
   */
 
-  if ((out = cupsdCreateConfFile(ConfigurationFile, ConfigFilePerm)) == NULL)
+  if ((out = cupsdCreateConfFile(conffile, ConfigFilePerm)) == NULL)
   {
     cupsFileClose(in);
     return (HTTP_SERVER_ERROR);
   }
 
   cupsdLogMessage(CUPSD_LOG_INFO, "Installing config file \"%s\"...",
-                  ConfigurationFile);
+                  conffile);
 
  /*
   * Copy from the request to the new config file...
@@ -3486,12 +3500,12 @@
     {
       cupsdLogMessage(CUPSD_LOG_ERROR,
                       "Unable to copy to config file \"%s\": %s",
-        	      ConfigurationFile, strerror(errno));
+        	      conffile, strerror(errno));
 
       cupsFileClose(in);
       cupsFileClose(out);
 
-      snprintf(filename, sizeof(filename), "%s.N", ConfigurationFile);
+      snprintf(filename, sizeof(filename), "%s.N", conffile);
       cupsdUnlinkOrRemoveFile(filename);
 
       return (HTTP_SERVER_ERROR);
@@ -3503,7 +3517,7 @@
 
   cupsFileClose(in);
 
-  if (cupsdCloseCreatedConfFile(out, ConfigurationFile))
+  if (cupsdCloseCreatedConfFile(out, conffile))
     return (HTTP_SERVER_ERROR);
 
  /*
@@ -3517,8 +3531,15 @@
   * Set the NeedReload flag...
   */
 
-  NeedReload = RELOAD_CUPSD;
-  ReloadTime = time(NULL);
+  if(conffile == ConfigurationFile)
+  {
+    NeedReload = RELOAD_CUPSD;
+    ReloadTime = time(NULL);
+  }
+  else if(conffile == SystemdConfigurationFile)
+  {
+    NeedSystemdReload = 1;
+  }
 
  /*
   * Return that the file was created successfully...
--- a/scheduler/conf.h
+++ b/scheduler/conf.h
@@ -100,6 +100,8 @@
 					/* cupsd.conf file to use */
 			*CupsFilesFile		VALUE(NULL),
 					/* cups-files.conf file to use */
+			*SystemdConfigurationFile		VALUE(NULL),
+					/* cupsd-systemd-listen.conf file to use */
 			*ServerName		VALUE(NULL),
 					/* FQDN for server */
 			*ServerAdmin		VALUE(NULL),
--- a/scheduler/main.c
+++ b/scheduler/main.c
@@ -340,6 +340,9 @@
   if (!ConfigurationFile)
     cupsdSetString(&ConfigurationFile, CUPS_SERVERROOT "/cupsd.conf");
 
+  if (!SystemdConfigurationFile)
+    cupsdSetString(&SystemdConfigurationFile, CUPS_SERVERROOT "/cupsd-systemd-listen.conf");
+
   if (!CupsFilesFile)
   {
     char	*filename,		/* Copy of cupsd.conf filename */
@@ -804,6 +807,15 @@
 
 #ifdef HAVE_SYSTEMD
        /*
+        * If systemd is the init system, reload the systemd configuration
+        */
+        if (NeedSystemdReload) {
+          cupsdLogMessage(CUPSD_LOG_DEBUG, "cupsd changed the systemd sockets, reload systemd and restart cups.socket");
+          system("test -d /run/systemd/system -a -x /bin/systemctl && /bin/systemctl --system daemon-reload && /bin/systemctl restart cups.socket");
+          NeedSystemdReload = 0;
+        }
+
+       /*
 	* If we were started by systemd get the listen sockets file
 	* descriptors...
         */
--- a/scheduler/cupsd.h
+++ b/scheduler/cupsd.h
@@ -155,6 +155,8 @@
 					/* Time of reload request... */
 VAR int			NeedReload	VALUE(RELOAD_ALL),
 					/* Need to load configuration? */
+			NeedSystemdReload	VALUE(0),
+					/* Need to reload systemd? */
 			DoingShutdown	VALUE(0);
 					/* Shutting down the scheduler? */
 VAR void		*DefaultProfile	VALUE(0);
